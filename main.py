# -*- coding: utf-8 -*-

import telebot
from telebot import types
import os
import sqlite3
from sqlite3 import Error
import time
import logging
import sys

sys.tracebacklimit = -1

###   INNITIATING TELEBOT   ###
with open('mountables/token.txt', 'r') as file: # don't forget to create "token.txt" in "biosummer_bot" directory with tg bot token
    TG_TOKEN = file.read().strip()
    
bot = telebot.TeleBot(TG_TOKEN)

###   SETTING UP LOGGER   ###
logging.basicConfig(format = '[%(asctime)s] %(levelname)s: %(message)s',
                    filename = 'mountables/logger.log', 
                    filemode = 'w',
                    encoding = 'utf-8', 
                    level = logging.WARNING)
logging.getLogger().setLevel(logging.INFO)
db_path = 'mountables/voting.db'
max_packs = len([f for f in os.listdir("mountables/entries/") if os.path.isdir(os.path.join("mountables/entries/", f))]) + 1
db_name = 'voting_2024'

# ---------TG BOT COMMANDS--------- #

###   "START"   ###
@bot.message_handler(commands = ['start'])
def start_message(message):
    # just a welcome message
    bot.reply_to(message,
                 """–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π —Å—Ç—É–¥–µ–Ω—Ç!
–°–µ–π—á–∞—Å —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ª–µ—Ç–Ω–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ —ç—Ç–æ–≥–æ –≥–æ–¥–∞. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É /vote.üå±
–£–¥–∞—á–∏!

–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –Ω–æ–º–µ—Ä–æ–º –û–î–ò–ù —Ä–∞–∑ (–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç –Ω–∏—á–µ–≥–æ –ù–ï –Ω—É–∂–Ω–æ).
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, —Ç–∞–∫ –∫–∞–∫ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤—ã–±–æ—Ä—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–µ–ª—å–∑—è.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å—ë –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏ /cancel, –∞ –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ /vote. üåø""")

###   "VOTE"   ###
@bot.message_handler(commands = ['vote'])
def voting_message(message):
    db_vote_check(message, message.from_user.id) #first bot checks if user's id already exists in db

###   "CANCEL"   ###    
@bot.message_handler(commands = ['cancel'])
def cancel_message(message):
    
    try:
        connection = create_connection(db_path, message) 
        if connection.execute(check_id.format(message.from_user.id)).fetchone() == (1,):
            # if user's id is in db, the whole row is deleated
            execute_query(connection, 
                          db_delete.format(message.from_user.id),
                          message
                          )
            bot.send_message(message.from_user.id,
                             '–ì–æ—Ç–æ–≤–æ! –¢–≤–æ–∏ –≥–æ–ª–æ—Å–∞ —É–¥–∞–ª–µ–Ω—ã. –ß—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /vote.'
                             )
            logging.info(f'–Æ–∑–µ—Ä {message.from_user.id} - –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã —Å—Ç—ë—Ä—Ç—ã.')
        else:
            # if not, nothing happens
            bot.send_message(message.from_user.id,
                             '–ö–∞–∂–µ—Ç—Å—è, —É –Ω–∞—Å –Ω–µ—Ç —Ç–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞. –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É /vote.'
                             )
            logging.info(f'–Æ–∑–µ—Ä {message.from_user.id} - –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–µ—Ä–µ—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
    
    except Error as e:
        exception_message(message)
        logging.warning(f'–Æ–∑–µ—Ä {message.from_user.id} - –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–µ—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω–∞.\n {e}')


# ---------VOTING FUNCTIONS--------- #

### CHECK IF ID IS IN DB  ###
def db_vote_check(message, voter_id):
    try:
        connection = create_connection(db_path, message)
        if connection.execute(check_id.format(voter_id)).fetchone() == (1,):
            # if id is already in db, user is informed and nothing happens
            logging.info(f'–Æ–∑–µ—Ä {message.from_user.id} - –∑–∞–ø—Ä–æ—Å –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å–ø–µ—à–µ–Ω.')
            bot.send_message(message.from_user.id, 
                             '–ö–∞–∂–µ—Ç—Å—è, —Ç—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –≤—Å—ë –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏ /cancel, –∞ –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ /vote.'
                             )
            logging.info(f'–Æ–∑–µ—Ä {message.from_user.id} - –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω–∞, –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
        else:
            # if id is not in db, bot proceeds with voting starting from PACK_1
            vote(message, 1)
            
    except Error as e:
        exception_message(message)
        logging.warning(f'–Æ–∑–µ—Ä {message.from_user.id} - –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω–∞.\n{e}')
        
###   SAVING VOTE   ###
def db_add_vote(message, voter_id, pack, image):
    image = image
    pack = pack
    connection = create_connection(db_path, message)
    if connection.execute(check_id.format(voter_id)).fetchone() == (1,):
        #if user presses a button in certain keyboard for the first time
        execute_query(connection, 
                      db_update.format(pack, image, voter_id),
                      message
                      )
        logging.info(f'–Æ–∑–µ—Ä {message.from_user.id} - –ó–∞–ø–∏—Å–∞–Ω –≤ –ë–î –≥–æ–ª–æ—Å –∑–∞ {image} –≤ –ø–∞–∫–µ {pack}. [–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å]')
    else:
        #if user presses a button in certain keyboard after another button was already pressed
        execute_query(connection,
                      db_insert.format(pack, voter_id, image),
                           message)
        logging.info(f'–Æ–∑–µ—Ä {message.from_user.id} - –ó–∞–ø–∏—Å–∞–Ω –≤ –ë–î –≥–æ–ª–æ—Å –∑–∞ {image} –≤ –ø–∞–∫–µ {pack}. [–Ω–æ–≤–æ–µ]')

###   DEALING WITH ENTRIES PACKS  ###
def vote(message, pack):
    images = os.listdir(f'mountables/entries/PACK_{pack}/')
    total_items = len(images)
    # setting up paginated keyboard:
    items_per_page = 60  
    current_page = 1

    try:
        # sending photos from each pack
        for image in images:
            image_num = images.index(image) + 1
            try:
                bot.send_photo(
                    message.from_user.id,
                    open(f'mountables/entries/PACK_{pack}/{image_num}.jpg', 'rb'),
                    caption=str(image_num),
                    parse_mode='HTML'
                )
                time.sleep(0.7)
                
            except Error as e:
                logging.warning(f'–Æ–∑–µ—Ä {message.from_user.id} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. {e}')
                exception_message(message)

        # creating markup keyboard based on number of max buttons (items_per_page)
        markup = create_pagination_markup(total_items, items_per_page, current_page, pack, message)
        bot.send_message(
            message.from_user.id,
            '–í—ã–±–µ—Ä–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í–ø–µ—Ä–µ–¥" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–æ–ª—å—à–µ 60):',
            reply_markup=markup
        )
        logging.info(f'–Æ–∑–µ—Ä {message.from_user.id} - –ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –ø–∞–∫—É {pack}.')
    
    except Error as e:
        exception_message(message)
        logging.warning(f'–Æ–∑–µ—Ä {message.from_user.id} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–∞ {pack}.\n{e}')


###   CREATING PAGINATEG KEYBOARD   ###
def create_pagination_markup(total_items, items_per_page, current_page, pack, message):
    try:
        # determining the range of items for the current page
        start_index = (current_page - 1) * items_per_page
        end_index = min(start_index + items_per_page, total_items)
    
        # creating buttons for the current page
        buttons = [
            types.InlineKeyboardButton(str(i + 1), callback_data=f'{pack}_{i + 1}')
            for i in range(start_index, end_index)
        ]
    
        # adding navigation buttons
        nav_buttons = []
        if current_page > 1:
            nav_buttons.append(types.InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data=f'prev_{pack}_{current_page - 1}'))
        if end_index < total_items:
            nav_buttons.append(types.InlineKeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°', callback_data=f'next_{pack}_{current_page + 1}'))
    
        # finalizing markup keyboard
        markup = types.InlineKeyboardMarkup(row_width=3)
        markup.add(*buttons)
        if nav_buttons:
            markup.add(*nav_buttons)
    
        return markup
    
    except Error as e:
        exception_message(message)
        logging.warning(f'–Æ–∑–µ—Ä {message.from_user.id} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–∞–∫–∞ {pack}.\n{e}')



###   HANDLING CALLBACKS FOR NAVIGATION BUTTONS   ###
@bot.callback_query_handler(func=lambda call: call.data.startswith('prev_') or call.data.startswith('next_'))
def handle_navigation(call):
    _, pack, page = call.data.split('_')
    pack = int(pack)
    page = int(page)

    images = os.listdir(f'mountables/entries/PACK_{pack}/')
    total_items = len(images)
    items_per_page = 60

    # create the updated markup for the new page
    markup = create_pagination_markup(total_items, items_per_page, page, pack)
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)


###   HANDLING CALLBACKS FROM VOTING KEYBOARDS   ###
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        data = call.data.split('_')
        if data[0] in ['prev', 'next']:
            pack = int(data[1])
            page = int(data[2])
            vote(call, pack, page)  # call vote function with the correct page
        else:
            pack = data[0]
            image = data[1]
            db_add_vote(call, call.from_user.id, pack, image)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é {image}",
                reply_markup=None
            )
            logging.info(f'–Æ–∑–µ—Ä {call.from_user.id} - –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É {image} –≤ –ø–∞–∫–µ {pack}.')
            pack = int(pack) + 1
            if pack != max_packs:
                vote(call, pack)
            else:
                bot.send_message(
                    call.from_user.id,
                    '–ì–æ—Ç–æ–≤–æ! –¢–≤–æ–∏ –≥–æ–ª–æ—Å–∞ —É—á—Ç–µ–Ω—ã! –ß—Ç–æ–±—ã –ø–µ—Ä–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /cancel, –∞ –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ /vote.'
                )
    except Error as e:
        exception_message(call)
        logging.warning(f'–Æ–∑–µ—Ä {call.message.from_user.id} - –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏. {e}')

        
       
# ---------EXCEPTION MESSAGE FEEDBACK FOR USER--------- #

def exception_message(message):
    bot.send_message(message.from_user.id,
                     '–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')


# ---------DEALING WITH SQL--------- #

###   CONNECTING to DB   ###
def create_connection(path, message):
    connection = None
    try:
        connection = sqlite3.connect(db_path)
        logging.info(f'–Æ–∑–µ—Ä {message.from_user.id} - –ë–æ—Ç –ø–æ—Ç–∫–ª—é—á–∏–ª—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
    except Error as e:
        logging.warning(f'–Æ–∑–µ—Ä {message.from_user.id} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. {e}')
        exception_message(message)

    return connection

###   FINALIZING REQUEST   ###
def execute_query(connection, query, message):
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        connection.commit()
        logging.info(f'–Æ–∑–µ—Ä {message.from_user.id} - –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.')
    except Error as e:
        logging.warning(f'–Æ–∑–µ—Ä {message.from_user.id} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n{e}')
        exception_message(message)
        
###   REQUEST LIST   ###
check_id = f'''SELECT EXISTS (SELECT * FROM {db_name} WHERE id = {{}})'''
db_update = f'''UPDATE {db_name} SET pack_{{}} = {{}} WHERE id = {{}}'''
db_delete = f'''DELETE FROM {db_name} WHERE id = {{}}'''
db_insert = f'''INSERT INTO 
     {db_name} (id, pack_{{}}) 
     VALUES ({{}}, {{}})'''


# ---------START BOT POLLING--------- #
bot.infinity_polling(timeout = 120, long_polling_timeout = 120)